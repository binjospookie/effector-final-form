"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[244],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),f=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=f(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=f(n),p=a,u=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?r.createElement(u,o(o({ref:t},c),{},{components:n})):r.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var f=2;f<i;f++)o[f]=n[f];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>f});var r=n(1163),a=(n(9496),n(9613));n(4063);const i={title:"Differences from Final Form"},o=void 0,l={unversionedId:"./docs/differences",id:"./docs/differences",title:"Differences from Final Form",description:"The project has a number of differences in working with the Final Form.",source:"@site/docs/differences.mdx",sourceDirName:"./docs",slug:"/docs/differences",permalink:"/effector-final-form/docs/differences",draft:!1,tags:[],version:"current",frontMatter:{title:"Differences from Final Form"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/effector-final-form/"},next:{title:"Limitations",permalink:"/effector-final-form/docs/limitations"}},s={},f=[{value:"FormState no undefined values",id:"formstate-no-undefined-values",level:2},{value:"<code>form</code> &amp; <code>field</code> subscriptions",id:"form--field-subscriptions",level:2},{value:"<code>form.isValidationPaused()</code>",id:"formisvalidationpaused",level:2},{value:"<code>form.registerField()</code>",id:"formregisterfield",level:2},{value:"<code>form.getState()</code>",id:"formgetstate",level:2},{value:"<code>form.getFieldState()</code>",id:"formgetfieldstate",level:2},{value:"<code>form.getRegisteredFields()</code>",id:"formgetregisteredfields",level:2},{value:"<code>form.subscribe()</code>",id:"formsubscribe",level:2}],c={toc:f},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The project has a number of differences in working with the Final Form."),(0,a.kt)("h2",{id:"formstate-no-undefined-values"},"FormState no undefined values"),(0,a.kt)("p",null,"Values of some ",(0,a.kt)("em",{parentName:"p"},"FormState")," properties are forcibly replaced by null to avoid a situation where the derived from ",(0,a.kt)("inlineCode",{parentName:"p"},"$formState")," may contain ",(0,a.kt)("em",{parentName:"p"},"undefined"),"."),(0,a.kt)("p",null,"List of values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"active"),(0,a.kt)("li",{parentName:"ul"},"errors"),(0,a.kt)("li",{parentName:"ul"},"modified"),(0,a.kt)("li",{parentName:"ul"},"submitErrors"),(0,a.kt)("li",{parentName:"ul"},"touched"),(0,a.kt)("li",{parentName:"ul"},"visited")),(0,a.kt)("h2",{id:"form--field-subscriptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"form")," & ",(0,a.kt)("inlineCode",{parentName:"h2"},"field")," subscriptions"),(0,a.kt)("p",null,"To subscribe to changes in a form or field, you should pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribeOn")," parameter."),(0,a.kt)("p",null,"Values not included in ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribeOn")," will be specified in the subscription with the value ",(0,a.kt)("em",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,"In the ",(0,a.kt)("em",{parentName:"p"},"effector-final-form")," you ",(0,a.kt)("strong",{parentName:"p"},"can not")," create many ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribers")," with different ",(0,a.kt)("inlineCode",{parentName:"p"},"subscriptions"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const { api } = createForm<{ firstName: string }, ['initialValues', 'values']>({\n  onSubmit: onSubmitMock,\n  // highlight-next-line\n  subscribeOn: ['initialValues', 'values'],\n});\n\napi.registerField({\n  name: 'firstName',\n  // highlight-next-line\n  subscribeOn: ['active'],\n});\n")),(0,a.kt)("h2",{id:"formisvalidationpaused"},(0,a.kt)("inlineCode",{parentName:"h2"},"form.isValidationPaused()")),(0,a.kt)("p",null,"It is a way to find out if validation currently paused."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nform.isValidationPaused(); // boolean\n\n// effector-final-form\n$formState.map((s) => s.isValidationPaused); // Store<boolean>\n")),(0,a.kt)("h2",{id:"formregisterfield"},(0,a.kt)("inlineCode",{parentName:"h2"},"form.registerField()")),(0,a.kt)("p",null,"In the ",(0,a.kt)("em",{parentName:"p"},"Final Form")," it is a way to register a new field and subscribes to changes to it.\nIn the ",(0,a.kt)("em",{parentName:"p"},"effector-final-form")," you ",(0,a.kt)("strong",{parentName:"p"},"can not")," set a ",(0,a.kt)("inlineCode",{parentName:"p"},"subscriber"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nform.registerField('firstName', () => {}, { active: true }, config: { initialValue: 'John' });\n\n// effector-final-form\napi.registerField({name: 'firstName', subscribeOn: ['active'], config: { initialValue: 'John' } })\n")),(0,a.kt)("h2",{id:"formgetstate"},(0,a.kt)("inlineCode",{parentName:"h2"},"form.getState()")),(0,a.kt)("admonition",{title:"You don't need this method!",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"getState()")," gives rise to difficult to debug imperative code and kind of race condition. Prefer declarative ",(0,a.kt)("a",{parentName:"p",href:"https://effector.dev/docs/api/effector/sample"},"sample")," to pass data from store and attach for effects")),(0,a.kt)("p",null,"It is a way to get the current state of the form without subscribing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nconst formState = form.getState();\n\n// effector-final-form\nconst formState = $formState.getState();\n")),(0,a.kt)("h2",{id:"formgetfieldstate"},(0,a.kt)("inlineCode",{parentName:"h2"},"form.getFieldState()")),(0,a.kt)("p",null,"It is a way to get the state of a specific field."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nconst firstNameState = form.getFieldState('firstName');\n\n// effector-final-form\nconst $firstName = $fields.map((fields) => fields.firstName);\n")),(0,a.kt)("h2",{id:"formgetregisteredfields"},(0,a.kt)("inlineCode",{parentName:"h2"},"form.getRegisteredFields()")),(0,a.kt)("admonition",{title:"You don't need this method!",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"getState()")," gives rise to difficult to debug imperative code and kind of race condition. Prefer declarative ",(0,a.kt)("a",{parentName:"p",href:"https://effector.dev/docs/api/effector/sample"},"sample")," to pass data from store and attach for effects")),(0,a.kt)("p",null,"It is a way to get a list of all the currently registered fields."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nconst fieldsList = form.getRegisteredFields();\n\n// effector-final-form\nconst fieldsList = $registeredFields.getState();\n")),(0,a.kt)("h2",{id:"formsubscribe"},(0,a.kt)("inlineCode",{parentName:"h2"},"form.subscribe()")),(0,a.kt)("p",null,"It is a way to ubscribes to changes to the form."),(0,a.kt)("p",null,"In the ",(0,a.kt)("em",{parentName:"p"},"effector-final-form")," you ",(0,a.kt)("strong",{parentName:"p"},"can not")," create many ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribers")," with different ",(0,a.kt)("inlineCode",{parentName:"p"},"subscriptions"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const subscriber = () => {};\n\n// Final Form\nform.subscribe(subscriber, { active: true });\n\n// effector-final-form\nsample({ clock: $form, target });\n")))}d.isMDXComponent=!0},4063:(e,t,n)=>{n(9496)}}]);