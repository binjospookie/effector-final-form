"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[600],{9613:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var r=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(a),p=n,f=m["".concat(s,".").concat(p)]||m[p]||c[p]||i;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},786:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=a(1163),n=(a(9496),a(9613));a(4063);const i={title:"API"},l=void 0,o={unversionedId:"./docs/api",id:"./docs/api",title:"API",description:"The description of some of the functions is taken from the Final Form documentation",source:"@site/docs/api.mdx",sourceDirName:"./docs",slug:"/docs/api",permalink:"/effector-final-form/docs/api",draft:!1,tags:[],version:"current",frontMatter:{title:"API"},sidebar:"tutorialSidebar",previous:{title:"Limitations",permalink:"/effector-final-form/docs/limitations"},next:{title:"Examples",permalink:"/effector-final-form/docs/examples"}},s={},u=[{value:"Form",id:"form",level:2},{value:"createForm",id:"createform",level:3},{value:"pauseValidation",id:"pausevalidation",level:3},{value:"registerField",id:"registerfield",level:3},{value:"setSubmitFn",id:"setsubmitfn",level:3},{value:"revalidateFx",id:"revalidatefx",level:3},{value:"reset",id:"reset",level:3},{value:"restart",id:"restart",level:3},{value:"resumeValidation",id:"resumevalidation",level:3},{value:"submitFx",id:"submitfx",level:3},{value:"form.$",id:"form-1",level:3},{value:"Field",id:"field",level:2},{value:"blurFx",id:"blurfx",level:3},{value:"changeFx",id:"changefx",level:3},{value:"focusFx",id:"focusfx",level:3},{value:"resetState",id:"resetstate",level:3},{value:"setValidationFn",id:"setvalidationfn",level:3}],d={toc:u},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The description of some of the functions is taken from the ",(0,n.kt)("a",{parentName:"p",href:"https://final-form.org/docs/final-form/types/FormAp"},"Final Form documentation"))),(0,n.kt)("h2",{id:"form"},"Form"),(0,n.kt)("h3",{id:"createform"},"createForm"),(0,n.kt)("p",null,"Form creation function."),(0,n.kt)("p",null,"Takes the same ",(0,n.kt)("a",{parentName:"p",href:"https://final-form.org/docs/final-form/types/Config"},"config")," as ",(0,n.kt)("inlineCode",{parentName:"p"},"createForm")," from Final Form with the differences"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"you can't pass ",(0,n.kt)("inlineCode",{parentName:"li"},"debug")," option"),(0,n.kt)("li",{parentName:"ul"},"you need to pass ",(0,n.kt)("a",{parentName:"li",href:"/docs/differences#form--field-subscriptions"},(0,n.kt)("inlineCode",{parentName:"a"},"subscribeOn")))),(0,n.kt)("p",null,"Returns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"api"),(0,n.kt)("li",{parentName:"ul"},"$")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const { api, $ } = createForm<{ firstName: string }>({\n  onSubmit: async (f) => {\n    await sleep(1000);\n\n    return f.firstName === 'Incorrect' ? { firstName: 'Submit Error' } : undefined;\n  },\n  subscribeOn: ['values', 'errors', 'submitting', 'submitSucceeded', 'submitFailed', 'submitErrors'],\n  // like config from Final Form with omited 'debug' | 'initialValues' | 'validate'\n});\n")),(0,n.kt)("h3",{id:"pausevalidation"},"pauseValidation"),(0,n.kt)("p",null,"If called, validation will be paused until resumeValidation() is called."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => void\n")),(0,n.kt)("h3",{id:"registerfield"},"registerField"),(0,n.kt)("p",null,"Registers a new field. Returns a field = $ (field state) and api for thid field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},"const form = createForm<{ name: string }>({ onSubmit: () => {}, subscribe: ['active'] });\n\nconst field = form.api.registerField({\n  name: 'firstName',\n  subscribeOn: ['value'],\n  initialValue: 'defaultValue', // Optional. or Store with a value\n  validate: (x) => (x === 'Steve' ? 'Error' : undefined), // Optional.\n  // config?: like config from Final Form with omited 'initialValue' | 'getValidator'\n});\n")),(0,n.kt)("h3",{id:"setsubmitfn"},"setSubmitFn"),(0,n.kt)("p",null,"Not presented in Final Form."),(0,n.kt)("p",null,"Allows you to dynamically set submit function. Uses ",(0,n.kt)("inlineCode",{parentName:"p"},"effect.use")," under the hood."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(_: (values: FormValues) => Promise<SubmissionErrors | void>) => void\n")),(0,n.kt)("h3",{id:"revalidatefx"},"revalidateFx"),(0,n.kt)("p",null,"Not presented in Final Form."),(0,n.kt)("p",null,"Triggers form revalidation. Can be useful when the form validation function depends on dynamic parameters (e.g. store value)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const setError = createEvent<string>();\nconst $error = createStore<string>('');\n\nsample({ clock: setError, target: $error });\n// highlight-next-line\nsample({ clock: setError, target: api.reValidateFx });\n\nconst validationFx = attach(() => {\n  effect: ({ fields, error }) => {\n    if (fields.firstName.length <= 2) {\n      return { firstName: error }\n    }\n  },\n  source: $error,\n  mapParams: (fields, error) => ({ fields, error })\n})\n\nsetError('Incorrect value');\n")),(0,n.kt)("h3",{id:"reset"},"reset"),(0,n.kt)("p",null,"Resets the values back to the initial values the form was initialized with. Or empties all the values if the form was not initialized. If you provide initialValues they will be used as the new initial values."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(initialValues: ?InitialFormValues) => Promise<void>;\n")),(0,n.kt)("h3",{id:"restart"},"restart"),(0,n.kt)("p",null,"Resets all form and field state. Same as calling reset(initialValues) on the form and resetState() for each field. Form should be just as it was when it was first created."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(initialValues: ?InitialFormValues) => Promise<void>;\n")),(0,n.kt)("h3",{id:"resumevalidation"},"resumeValidation"),(0,n.kt)("p",null,"Resumes validation paused by pauseValidation(). If validation was blocked while it was paused, validation will be run."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => Promise<void>;\n")),(0,n.kt)("h3",{id:"submitfx"},"submitFx"),(0,n.kt)("p",null,"Submits the form if there are currently no validation errors. It may return undefined or a Promise depending on the nature of the onSubmit configuration value given to the form when it was created."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => Promise<Object | undefined | void>;\n")),(0,n.kt)("h3",{id:"form-1"},"form.$"),(0,n.kt)("p",null,"It is a ",(0,n.kt)("em",{parentName:"p"},"Store")," that stores the form state. The keys are taken from ",(0,n.kt)("inlineCode",{parentName:"p"},"subscribeOn")," + ",(0,n.kt)("inlineCode",{parentName:"p"},"isValidationOnPause")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},"const form = createForm({\n  onSubmit: () => {},\n  initialValues: { firstName: '' },\n  subscribeOn: ['active', 'errors'],\n});\n\nform.$.getState(); // { active: null, errors: {}, isValidationPaused: false }\n")),(0,n.kt)("h2",{id:"field"},"Field"),(0,n.kt)("h3",{id:"blurfx"},"blurFx"),(0,n.kt)("p",null,"Blurs (marks inactive) the given field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => Promise<void>;\n")),(0,n.kt)("h3",{id:"changefx"},"changeFx"),(0,n.kt)("p",null,"Changes the value of the given field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"<F extends keyof FormValues>(value?: FormValues[F]) => Promise<void>;\n")),(0,n.kt)("h3",{id:"focusfx"},"focusFx"),(0,n.kt)("p",null,"Focuses (marks active) the given field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => Promise<void>;\n")),(0,n.kt)("h3",{id:"resetstate"},"resetState"),(0,n.kt)("p",null,"Resets all of a field's flags (e.g. touched, visited, etc.) to their initial state."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(name: string) => Promise<void>;\n")),(0,n.kt)("h3",{id:"setvalidationfn"},"setValidationFn"),(0,n.kt)("p",null,"Not presented in Final Form."),(0,n.kt)("p",null,"Allows you to dynamically set validation function. Uses ",(0,n.kt)("inlineCode",{parentName:"p"},"effect.use")," under the hood."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(_: (params: FormValues) => Promise<SubmissionErrors | void>) => void\n")))}c.isMDXComponent=!0},4063:(e,t,a)=>{a(9496)}}]);