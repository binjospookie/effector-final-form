"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[244],{9613:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>u});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},f=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,u=m["".concat(s,".").concat(c)]||m[c]||p[c]||a;return n?r.createElement(u,o(o({ref:t},f),{},{components:n})):r.createElement(u,o({ref:t},f))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(1163),i=(n(9496),n(9613));n(4063);const a={title:"Differences from Final Form",sidebar_position:1},o=void 0,l={unversionedId:"./docs/differences",id:"./docs/differences",title:"Differences from Final Form",description:"The project has a number of differences in working with the Final Form.",source:"@site/docs/differences.mdx",sourceDirName:"./docs",slug:"/docs/differences",permalink:"/effector-final-form/docs/differences",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Differences from Final Form",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/effector-final-form/"},next:{title:"Limitations",permalink:"/effector-final-form/docs/limitations"}},s={},d=[{value:"Not only <code>form</code>",id:"not-only-form",level:2},{value:"form.$ no <code>undefined</code> values",id:"form-no-undefined-values",level:2},{value:"field.$ no <code>undefined</code> values",id:"field-no-undefined-values",level:2},{value:"<code>api.revalidateFx</code>",id:"apirevalidatefx",level:2},{value:"<code>field.api.setValidationFn</code>",id:"fieldapisetvalidationfn",level:2},{value:"<code>api.setSubmitFn</code>",id:"apisetsubmitfn",level:2},{value:"<code>createForm.initialValues</code>",id:"createforminitialvalues",level:2},{value:"<code>form</code> &amp; <code>field</code> subscriptions",id:"form--field-subscriptions",level:2},{value:"<code>form.isValidationPaused()</code>",id:"formisvalidationpaused",level:2},{value:"<code>form.registerField()</code>",id:"formregisterfield",level:2},{value:"<code>form.getState()</code>",id:"formgetstate",level:2},{value:"<code>form.getFieldState()</code>",id:"formgetfieldstate",level:2},{value:"<code>form.subscribe()</code>",id:"formsubscribe",level:2}],f={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The project has a number of differences in working with the Final Form."),(0,i.kt)("h2",{id:"not-only-form"},"Not only ",(0,i.kt)("inlineCode",{parentName:"h2"},"form")),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"Final Form")," you can do most things using ",(0,i.kt)("inlineCode",{parentName:"p"},"form"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"effector-final-form")," provides several entities:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const { $, api } = createForm<{ firstName: string }>({\n  onSubmit: onSubmitMock,\n  subscribeOn: ['initialValues', 'values'],\n});\n")),(0,i.kt)("h2",{id:"form-no-undefined-values"},"form.$ no ",(0,i.kt)("inlineCode",{parentName:"h2"},"undefined")," values"),(0,i.kt)("p",null,"Values of some ",(0,i.kt)("em",{parentName:"p"},"FormState")," properties are forcibly replaced by null to avoid a situation where the derived from ",(0,i.kt)("inlineCode",{parentName:"p"},"form.$")," may contain ",(0,i.kt)("em",{parentName:"p"},"undefined"),"."),(0,i.kt)("p",null,"List of values:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"active"),(0,i.kt)("li",{parentName:"ul"},"errors"),(0,i.kt)("li",{parentName:"ul"},"modified"),(0,i.kt)("li",{parentName:"ul"},"submitErrors"),(0,i.kt)("li",{parentName:"ul"},"touched"),(0,i.kt)("li",{parentName:"ul"},"visited")),(0,i.kt)("h2",{id:"field-no-undefined-values"},"field.$ no ",(0,i.kt)("inlineCode",{parentName:"h2"},"undefined")," values"),(0,i.kt)("p",null,"Values of some ",(0,i.kt)("em",{parentName:"p"},"FieldState")," properties are forcibly replaced by null to avoid a situation when yours derived ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"field.$")," may contain ",(0,i.kt)("em",{parentName:"p"},"undefined"),"."),(0,i.kt)("h2",{id:"apirevalidatefx"},(0,i.kt)("inlineCode",{parentName:"h2"},"api.revalidateFx")),(0,i.kt)("p",null,"Not presented in Final Form."),(0,i.kt)("p",null,"Triggers form revalidation. Can be useful when the form validation function depends on dynamic parameters (e.g. store value)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const setError = createEvent<string>();\nconst $error = createStore<string>('');\n\nsample({ clock: setError, target: $error });\n// highlight-next-line\nsample({ clock: setError, target: api.reValidateFx });\n\nconst validationFx = attach(() => {\n  effect: ({ fields, error }) => {\n    if (fields.firstName.length <= 2) {\n      return { firstName: error }\n    }\n  },\n  source: $error,\n  mapParams: (fields, error) => ({ fields, error })\n})\n\nsetError('Incorrect value');\n")),(0,i.kt)("h2",{id:"fieldapisetvalidationfn"},(0,i.kt)("inlineCode",{parentName:"h2"},"field.api.setValidationFn")),(0,i.kt)("p",null,"Not presented in Final Form."),(0,i.kt)("p",null,"Allows you to dynamically set validation function. Uses ",(0,i.kt)("inlineCode",{parentName:"p"},"effect.use")," under the hood."),(0,i.kt)("h2",{id:"apisetsubmitfn"},(0,i.kt)("inlineCode",{parentName:"h2"},"api.setSubmitFn")),(0,i.kt)("p",null,"Not presented in Final Form."),(0,i.kt)("p",null,"Allows you to dynamically set submit function. Uses ",(0,i.kt)("inlineCode",{parentName:"p"},"effect.use")," under the hood."),(0,i.kt)("h2",{id:"createforminitialvalues"},(0,i.kt)("inlineCode",{parentName:"h2"},"createForm.initialValues")),(0,i.kt)("p",null,"You can not pass undefined initial values in ",(0,i.kt)("inlineCode",{parentName:"p"},"createForm"),".\nBut it is possible to provide them on ",(0,i.kt)("inlineCode",{parentName:"p"},"api.registerField"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const form = createForm<{ name: string }>({\n  onSubmit: () => {},\n});\n\nform.api.registerField({\n  name: 'name',\n  // highlight-next-line\n  initialValue: 'John',\n  ...\n})\n\n")),(0,i.kt)("h2",{id:"form--field-subscriptions"},(0,i.kt)("inlineCode",{parentName:"h2"},"form")," & ",(0,i.kt)("inlineCode",{parentName:"h2"},"field")," subscriptions"),(0,i.kt)("p",null,"To subscribe to changes in a form or field, you should pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribeOn")," parameter."),(0,i.kt)("p",null,"Values not included in ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribeOn")," will be specified in the subscription with the value ",(0,i.kt)("em",{parentName:"p"},"false"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Except ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," of fields.")),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"effector-final-form")," you ",(0,i.kt)("strong",{parentName:"p"},"can not")," create many ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribers")," with different ",(0,i.kt)("inlineCode",{parentName:"p"},"subscriptions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const { api } = createForm<{ firstName: string }>({\n  onSubmit: onSubmitMock,\n  // highlight-next-line\n  subscribeOn: ['initialValues', 'values'],\n});\n\napi.registerField({\n  name: 'firstName',\n  // highlight-next-line\n  subscribeOn: ['active'],\n});\n")),(0,i.kt)("h2",{id:"formisvalidationpaused"},(0,i.kt)("inlineCode",{parentName:"h2"},"form.isValidationPaused()")),(0,i.kt)("p",null,"It is a way to find out if validation currently paused."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nform.isValidationPaused(); // boolean\n\n// effector-final-form\nform.$.map((s) => s.isValidationPaused); // Store<boolean>\n")),(0,i.kt)("h2",{id:"formregisterfield"},(0,i.kt)("inlineCode",{parentName:"h2"},"form.registerField()")),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"Final Form")," it is a way to register a new field and subscribes to changes to it.\nIn the ",(0,i.kt)("em",{parentName:"p"},"effector-final-form")," you ",(0,i.kt)("strong",{parentName:"p"},"can not")," set a ",(0,i.kt)("inlineCode",{parentName:"p"},"subscriber"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nform.registerField('firstName', () => {}, { active: true }, config: { initialValue: 'John' });\n\n// effector-final-form\napi.registerField({name: 'firstName', subscribeOn: ['active'], initialValue: 'John' })\n")),(0,i.kt)("h2",{id:"formgetstate"},(0,i.kt)("inlineCode",{parentName:"h2"},"form.getState()")),(0,i.kt)("admonition",{title:"You don't need this method!",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"getState()")," gives rise to difficult to debug imperative code and kind of race condition. Prefer declarative ",(0,i.kt)("a",{parentName:"p",href:"https://effector.dev/docs/api/effector/sample"},"sample")," to pass data from store and attach for effects")),(0,i.kt)("p",null,"It is a way to get the current state of the form without subscribing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nconst formState = form.getState();\n\n// effector-final-form\nconst formState = form.$.getState();\n")),(0,i.kt)("h2",{id:"formgetfieldstate"},(0,i.kt)("inlineCode",{parentName:"h2"},"form.getFieldState()")),(0,i.kt)("p",null,"It is a way to get the state of a specific field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Final Form\nconst firstNameState = form.getFieldState('firstName');\n\n// effector-final-form\nconst $firstName = $fields.map((fields) => fields.firstName);\n")),(0,i.kt)("h2",{id:"formsubscribe"},(0,i.kt)("inlineCode",{parentName:"h2"},"form.subscribe()")),(0,i.kt)("p",null,"It is a way to ubscribes to changes to the form."),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"effector-final-form")," you ",(0,i.kt)("strong",{parentName:"p"},"can not")," create many ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribers")," with different ",(0,i.kt)("inlineCode",{parentName:"p"},"subscriptions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const subscriber = () => {};\n\n// Final Form\nform.subscribe(subscriber, { active: true });\n\n// effector-final-form\nsample({ clock: form.$, target });\n")))}p.isMDXComponent=!0},4063:(e,t,n)=>{n(9496)}}]);