"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[600],{9613:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var i=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),u=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(a),p=n,f=m["".concat(o,".").concat(p)]||m[p]||c[p]||r;return a?i.createElement(f,l(l({ref:t},d),{},{components:a})):i.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:n,l[1]=s;for(var u=2;u<r;u++)l[u]=a[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},786:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var i=a(1163),n=(a(9496),a(9613));a(4063);const r={title:"API"},l=void 0,s={unversionedId:"./docs/api",id:"./docs/api",title:"API",description:"The description of some of the functions is taken from the Final Form documentation",source:"@site/docs/api.mdx",sourceDirName:"./docs",slug:"/docs/api",permalink:"/effector-final-form/docs/api",draft:!1,tags:[],version:"current",frontMatter:{title:"API"},sidebar:"tutorialSidebar",previous:{title:"Limitations",permalink:"/effector-final-form/docs/limitations"},next:{title:"Examples",permalink:"/effector-final-form/docs/examples"}},o={},u=[{value:"createForm",id:"createform",level:2},{value:"api",id:"api",level:2},{value:"blurFx",id:"blurfx",level:3},{value:"changeFx",id:"changefx",level:3},{value:"focusFx",id:"focusfx",level:3},{value:"initialize",id:"initialize",level:3},{value:"pauseValidation",id:"pausevalidation",level:3},{value:"registerField",id:"registerfield",level:3},{value:"reset",id:"reset",level:3},{value:"resetFieldState",id:"resetfieldstate",level:3},{value:"restart",id:"restart",level:3},{value:"resumeValidation",id:"resumevalidation",level:3},{value:"revalidateFx",id:"revalidatefx",level:3},{value:"setSubmitFn",id:"setsubmitfn",level:3},{value:"setValidationFn",id:"setvalidationfn",level:3},{value:"submitFx",id:"submitfx",level:3},{value:"$fields",id:"fields",level:2},{value:"$formState",id:"formstate",level:2},{value:"$registeredFields",id:"registeredfields",level:2}],d={toc:u},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The description of some of the functions is taken from the ",(0,n.kt)("a",{parentName:"p",href:"https://final-form.org/docs/final-form/types/FormAp"},"Final Form documentation"))),(0,n.kt)("h2",{id:"createform"},"createForm"),(0,n.kt)("p",null,"Form creation function."),(0,n.kt)("p",null,"Takes the same ",(0,n.kt)("a",{parentName:"p",href:"https://final-form.org/docs/final-form/types/Config"},"config")," as ",(0,n.kt)("inlineCode",{parentName:"p"},"createForm")," from Final Form with the differences"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"you can't pass ",(0,n.kt)("inlineCode",{parentName:"li"},"debug")," option"),(0,n.kt)("li",{parentName:"ul"},"you need to pass ",(0,n.kt)("a",{parentName:"li",href:"/docs/differences#form--field-subscriptions"},(0,n.kt)("inlineCode",{parentName:"a"},"subscribeOn")))),(0,n.kt)("p",null,"Returns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"docs/api#api"},"api")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"docs/api#fields"},"$fields")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"docs/api#formstate"},"$formState")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"docs/api#registeredfields"},"$registeredFields"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="With initial values"',title:'"With',initial:!0,'values"':!0},"const { api, $fields, $formState, $registeredFields } = createForm({\n  onSubmit: async (f) => {\n    await sleep(1000);\n\n    return f.firstName === 'Incorrect' ? { firstName: 'Submit Error' } : undefined;\n  },\n  validate: (f) => (f.firstName === '' ? { firstName: 'Can not be empty' } : undefined),\n  initialValues: { firstName: '' },\n  subscribeOn: ['values', 'errors', 'submitting', 'submitSucceeded', 'submitFailed', 'submitErrors'],\n});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="With initial values as $"',title:'"With',initial:!0,values:!0,as:!0,'$"':!0},"const $initialValues = createStore({ firstName: '' });\n\nconst { api, $fields, $formState, $registeredFields } = createForm({\n  onSubmit: async (f) => {\n    await sleep(1000);\n\n    return f.firstName === 'Incorrect' ? { firstName: 'Submit Error' } : undefined;\n  },\n  validate: (f) => (f.firstName === '' ? { firstName: 'Can not be empty' } : undefined),\n  initialValues: $initialValues,\n  subscribeOn: ['values', 'errors', 'submitting', 'submitSucceeded', 'submitFailed', 'submitErrors'],\n});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Without initial values"',title:'"Without',initial:!0,'values"':!0},"const subscribeOn = [\n  'values',\n  'errors',\n  'submitting',\n  'submitSucceeded',\n  'submitFailed',\n  'submitErrors',\n] as const;\n\nconst { api, $fields, $formState, $registeredFields } = createForm<{\n    firstName: string,\n    typeof subscribeOn\n}>({\n  onSubmit: async (f) => {\n    await sleep(1000);\n\n    return f.firstName === 'Incorrect' ? { firstName: 'Submit Error' } : undefined;\n  },\n  validate: (f) => (f.firstName === '' ? { firstName: 'Can not be empty' } : undefined),\n  subscribeOn: ['values', 'errors', 'submitting', 'submitSucceeded', 'submitFailed', 'submitErrors'],\n});\n")),(0,n.kt)("h2",{id:"api"},"api"),(0,n.kt)("h3",{id:"blurfx"},"blurFx"),(0,n.kt)("p",null,"Blurs (marks inactive) the given field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(name: string) => Promise<void>;\n")),(0,n.kt)("h3",{id:"changefx"},"changeFx"),(0,n.kt)("p",null,"Changes the value of the given field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"<F extends keyof FormValues>(_: { name: F; value?: FormValues[F] }) => Promise<void>;\n")),(0,n.kt)("h3",{id:"focusfx"},"focusFx"),(0,n.kt)("p",null,"Focuses (marks active) the given field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(name: string) => Promise<void>;\n")),(0,n.kt)("h3",{id:"initialize"},"initialize"),(0,n.kt)("p",null,"Initializes the form to the values provided. All the values will be set to these values, and dirty and pristine will be calculated by performing a shallow-equals between the current values and the values last initialized with. The form will be pristine after this call."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(data: InitialFormValues | ((values: FormValues) => InitialFormValues)) => void\n")),(0,n.kt)("h3",{id:"pausevalidation"},"pauseValidation"),(0,n.kt)("p",null,"If called, validation will be paused until resumeValidation() is called."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => void\n")),(0,n.kt)("h3",{id:"registerfield"},"registerField"),(0,n.kt)("p",null,"Registers a new field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(_: { name: string; subscribeOn: string[]; config?: FieldConfig }) => Promise<Unsubscribe>;\n")),(0,n.kt)("h3",{id:"reset"},"reset"),(0,n.kt)("p",null,"Resets the values back to the initial values the form was initialized with. Or empties all the values if the form was not initialized. If you provide initialValues they will be used as the new initial values."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(initialValues: ?InitialFormValues) => Promise<void>;\n")),(0,n.kt)("h3",{id:"resetfieldstate"},"resetFieldState"),(0,n.kt)("p",null,"Resets all of a field's flags (e.g. touched, visited, etc.) to their initial state."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(name: string) => Promise<void>;\n")),(0,n.kt)("h3",{id:"restart"},"restart"),(0,n.kt)("p",null,"Resets all form and field state. Same as calling reset(initialValues) on the form and resetFieldState() for each field. Form should be just as it was when it was first created."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(initialValues: ?InitialFormValues) => Promise<void>;\n")),(0,n.kt)("h3",{id:"resumevalidation"},"resumeValidation"),(0,n.kt)("p",null,"Resumes validation paused by pauseValidation(). If validation was blocked while it was paused, validation will be run."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => Promise<void>;\n")),(0,n.kt)("h3",{id:"revalidatefx"},"revalidateFx"),(0,n.kt)("p",null,"Not presented in Final Form."),(0,n.kt)("p",null,"Triggers form revalidation. Can be useful when the form validation function depends on dynamic parameters (e.g. store value)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const setError = createEvent<string>();\nconst $error = createStore<string>('');\n\nsample({ clock: setError, target: $error });\n// highlight-next-line\nsample({ clock: setError, target: api.reValidateFx });\n\nconst validationFx = attach(() => {\n  effect: ({ fields, error }) => {\n    if (fields.firstName.length <= 2) {\n      return { firstName: error }\n    }\n  },\n  source: $error,\n  mapParams: (fields, error) => ({ fields, error })\n})\n\nsetError('Incorrect value');\n")),(0,n.kt)("h3",{id:"setsubmitfn"},"setSubmitFn"),(0,n.kt)("p",null,"Not presented in Final Form."),(0,n.kt)("p",null,"Allows you to dynamically set submit function. Uses ",(0,n.kt)("inlineCode",{parentName:"p"},"effect.use")," under the hood."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(_: (values: FormValues) => Promise<SubmissionErrors | void>) => void\n")),(0,n.kt)("h3",{id:"setvalidationfn"},"setValidationFn"),(0,n.kt)("p",null,"Not presented in Final Form."),(0,n.kt)("p",null,"Allows you to dynamically set validation function. Uses ",(0,n.kt)("inlineCode",{parentName:"p"},"effect.use")," under the hood."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"(_: (params: FormValues) => Promise<SubmissionErrors | void>) => void\n")),(0,n.kt)("h3",{id:"submitfx"},"submitFx"),(0,n.kt)("p",null,"Submits the form if there are currently no validation errors. It may return undefined or a Promise depending on the nature of the onSubmit configuration value given to the form when it was created."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"() => Promise<Object | undefined | void>;\n")),(0,n.kt)("h2",{id:"fields"},"$fields"),(0,n.kt)("h2",{id:"formstate"},"$formState"),(0,n.kt)("p",null,"It is a ",(0,n.kt)("em",{parentName:"p"},"Store")," that stores the form state. The keys are taken from ",(0,n.kt)("inlineCode",{parentName:"p"},"subscribeOn")," + ",(0,n.kt)("inlineCode",{parentName:"p"},"isValidationOnPause")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},"const { $formState } = createForm({\n  onSubmit: () => {},\n  initialValues: { firstName: '' },\n  subscribeOn: ['active', 'errors'],\n});\n\n$formState.getState(); // { active: null, errors: {}, isValidationPaused: false }\n")),(0,n.kt)("h2",{id:"registeredfields"},"$registeredFields"),(0,n.kt)("p",null,"It is a ",(0,n.kt)("em",{parentName:"p"},"Store")," that stores a list of names of registered fields."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example"',title:'"Example"'},"const { $registeredFields, api } = createForm({\n  onSubmit: () => {},\n  initialValues: { firstName: '' },\n  subscribeOn: ['active'],\n});\n\n$registeredFields.getState(); // []\n\napi.registerField({ name: 'firstName', subscribeOn: ['value'] });\n$registeredFields.getState(); // ['firstName']\n\napi.registerField({ name: 'lastName', subscribeOn: ['value'] });\n$registeredFields.getState(); // ['firstName', 'lastName']\n")))}c.isMDXComponent=!0},4063:(e,t,a)=>{a(9496)}}]);