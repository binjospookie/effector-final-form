"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[206],{9613:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(r),u=a,d=p["".concat(l,".").concat(u)]||p[u]||f[u]||o;return r?n.createElement(d,i(i({ref:t},m),{},{components:r})):n.createElement(d,i({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2278:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(1163),a=(r(9496),r(9613));r(4063);const o={slug:"/",sidebar_position:0},i="Introduction",s={unversionedId:"./docs/intro",id:"./docs/intro",title:"Introduction",description:"Forms values and validation rules are part of the business logic. This means that you need to be able to work with them without being bound to the UI-framework.",source:"@site/docs/intro.mdx",sourceDirName:"./docs",slug:"/",permalink:"/effector-final-form/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{slug:"/",sidebar_position:0},sidebar:"tutorialSidebar",next:{title:"Differences from Final Form",permalink:"/effector-final-form/docs/differences"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Base Example",id:"base-example",level:2}],m={toc:c},p="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Forms values and validation rules are part of the business logic. This means that you need to be able to work with them without being bound to the UI-framework."),(0,a.kt)("p",null,"The goal of this project is to combine ",(0,a.kt)("a",{parentName:"p",href:"https://final-form.org/"},"Final Form")," and ",(0,a.kt)("a",{parentName:"p",href:"https://effector.dev/"},"Effector")," to achieve the goal described above."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("admonition",{title:"Be careful",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You need to have installed ",(0,a.kt)("a",{parentName:"p",href:"https://effector.dev/"},"effector")," and ",(0,a.kt)("a",{parentName:"p",href:"https://final-form.org/"},"final-form")," packages")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add effector-final-form\n# or\nnpm add effector-final-form\n# or\npnpm add effector-final-form\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Just import from the root module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createForm } from 'effector-final-form';\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/react-ts-xjh6yd?file=index.tsx"},"Try it")),(0,a.kt)("h2",{id:"base-example"},"Base Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"file=../../src/__tests__/example.spec.ts",file:"../../src/__tests__/example.spec.ts"},"import { allSettled, fork } from 'effector';\nimport { vi } from 'vitest';\n\n// import { createForm } from 'effector-final-form';\nimport { createForm } from '../index';\n\nvi.useFakeTimers();\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\ndescribe('example', () => {\n  test('', async () => {\n    const { $formState, $fields, domain, api } = createForm({\n      onSubmit: async (f) => {\n        await sleep(1000);\n\n        return f.firstName === 'Incorrect' ? { firstName: 'Submit Error' } : undefined;\n      },\n      validate: (f) => (f.firstName === '' ? { firstName: 'Can not be empty' } : undefined),\n      initialValues: { firstName: '' },\n      subscribeOn: ['values', 'errors', 'submitting', 'submitSucceeded', 'submitFailed', 'submitErrors'],\n    });\n    const scope = fork(domain);\n\n    await allSettled(api.registerField, {\n      scope,\n      params: {\n        name: 'firstName',\n        subscribeOn: ['value', 'error', 'initial'],\n      },\n    });\n\n    {\n      await allSettled(api.changeFx, { scope, params: { name: 'firstName', value: '' } });\n      expect(scope.getState($fields).firstName.error).toBe('Can not be empty');\n      expect(scope.getState($fields).firstName.initial).toBe('');\n      expect(scope.getState($fields).firstName.value).toBe('');\n\n      expect(scope.getState($formState).errors).toStrictEqual({ firstName: 'Can not be empty' });\n      expect(scope.getState($formState).values).toStrictEqual({ firstName: '' });\n      expect(scope.getState($formState).submitting).toBe(false);\n      expect(scope.getState($formState).submitSucceeded).toBe(false);\n      expect(scope.getState($formState).submitFailed).toBe(false);\n      expect(scope.getState($formState).submitErrors).toBe(null);\n    }\n\n    {\n      await allSettled(api.changeFx, { scope, params: { name: 'firstName', value: 'Incorrect' } });\n      expect(scope.getState($fields).firstName.error).toBe(undefined);\n      expect(scope.getState($fields).firstName.value).toBe('Incorrect');\n      expect(scope.getState($formState).errors).toStrictEqual({});\n    }\n\n    {\n      const submitPromise = allSettled(api.submitFx, { scope });\n      vi.runOnlyPendingTimers();\n\n      expect(scope.getState($formState).submitting).toBe(true);\n\n      await submitPromise;\n\n      expect($formState.getState().submitting).toBe(false);\n      expect($formState.getState().submitSucceeded).toBe(false);\n      expect($formState.getState().submitFailed).toBe(true);\n      expect($formState.getState().submitErrors).toStrictEqual({ firstName: 'Submit Error' });\n    }\n\n    {\n      await allSettled(api.changeFx, { scope, params: { name: 'firstName', value: 'John' } });\n      expect(scope.getState($fields).firstName.error).toBe(undefined);\n      expect(scope.getState($fields).firstName.value).toBe('John');\n      expect(scope.getState($formState).errors).toStrictEqual({});\n\n      const submitPromise = allSettled(api.submitFx, { scope });\n      vi.runOnlyPendingTimers();\n\n      expect(scope.getState($formState).submitting).toBe(true);\n\n      await submitPromise;\n\n      expect($formState.getState().submitting).toBe(false);\n      expect($formState.getState().submitSucceeded).toBe(true);\n      expect($formState.getState().submitFailed).toBe(false);\n      expect($formState.getState().submitErrors).toBe(null);\n    }\n  });\n});\n")))}f.isMDXComponent=!0},4063:(e,t,r)=>{r(9496)}}]);